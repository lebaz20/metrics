AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for S3, Lambda, Kinesis, Kinesis Analytics, Timestream, API Gateway, Route 53, QuickSight, and CloudFront

Parameters:
  Username:
    Type: String
    Description: User with enough access to create needed resources

  LambdaBucketName:
    Type: String
    Description: Name of the S3 bucket for Lambda code
    Default: metrics-lambda-code-bucket

  LambdaCodeVersion:
    Type: String
    Description: Version of Lambda code to force redeployment
    Default: v2 # Update this parameter when forcing redeployment

  AssetsBucketName:
    Type: String
    Description: Name of the S3 bucket for Assets
    Default: metrics-assets-bucket
  
  TimeStreamBucketName:
    Type: String
    Description: Name of the S3 bucket for TimeStream
    Default: metrics-timestream-bucket

  TimestreamDatabaseName:
    Type: String
    Description: Name of the Timestream database
    Default: MetricsTimestreamDB
  
  TimestreamTableMemoryStoreRetentionPeriodInHours:
    Type: Number
    Description: Number of hours to retain table in memory
    Default: 1

  TimestreamTableStoreRetentionPeriodInDays:
    Type: Number
    Description: Number of days to store table
    Default: 1
  
  ShouldCreateResource:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Create resources only when needed

Conditions:
  ShouldCreateResource: !Equals [!Ref ShouldCreateResource, "true"]

Resources:
  ## API Gateway
  MetricsApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MetricsApiGateway

  MetricsApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MetricsApiGateway
      ParentId: !GetAtt MetricsApiGateway.RootResourceId
      PathPart: metric
    DependsOn: MetricsApiGateway

  MetricsApiGatewayOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref MetricsApiGatewayResource
      RestApiId: !Ref MetricsApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn:
      - MetricsApiGatewayResource
      - MetricsApiGateway

  MetricsApiGatewayPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref MetricsApiGatewayResource
      RestApiId: !Ref MetricsApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MetricsPostRecordLambdaFunction.Arn}/invocations
        RequestParameters:
          integration.request.header.Content-Type: "'application/json'"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: "'*'"  # Note the single quotes around '*'
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"  # Note the single quotes around '*'
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"  # Note the single quotes around '*'
    DependsOn:
      - MetricsApiGatewayResource
      - MetricsApiGateway
      - MetricsPostRecordLambdaFunction

  MetricsApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MetricsApiGateway
      StageName: prod
    DependsOn:
      - MetricsApiGateway
      - MetricsApiGatewayPOSTMethod

  ## Assets CDN
  MetricsCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: MetricsCachePolicy
        DefaultTTL: 60  # Default Time-To-Live (TTL) for cache objects in seconds
        MaxTTL: 3600    # Maximum TTL for cache objects in seconds
        MinTTL: 0       # Minimum TTL for cache objects in seconds
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          QueryStringsConfig:
            QueryStringBehavior: all
          HeadersConfig:
            HeaderBehavior: none
          EnableAcceptEncodingGzip: true

  MetricsCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${AssetsBucketName}.s3.amazonaws.com"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: allow-all
          CachePolicyId: !Ref MetricsCachePolicy  # Reference the CachePolicy resource
        DefaultRootObject: index.html
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
    DependsOn:
      - MetricsCachePolicy

  MetricsCloudFrontRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetricsCloudFrontS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${AssetsBucketName}/*'

  ## Metrics lambda function
  MetricsPostRecordLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MetricsPostRecordLambdaFunction
      Runtime: nodejs18.x
      Handler: index.postRecord
      Role: !GetAtt MetricsLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Sub "lambda-code-${LambdaCodeVersion}.zip" # Use the parameter here
      Timeout: 10
      Environment:
        Variables:
          KINESIS_STREAM_NAME: RawMetricsKinesisStream
    DependsOn:
      - MetricsLambdaExecutionRole
      - MetricsRawKinesisStream

  MetricsConsumeStreamLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MetricsConsumeStreamLambdaFunction
      Runtime: nodejs18.x
      Handler: index.consumeStream
      Role: !GetAtt MetricsLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Sub "lambda-code-${LambdaCodeVersion}.zip" # Use the parameter here
      Timeout: 60
      Environment:
        Variables:
          TIMESTREAM_DATABASE: !Ref TimestreamDatabaseName
          TIMESTREAM_RAW_TABLE: metrics_raw
          TIMESTREAM_MIN_TABLE: metrics_min
    DependsOn:
      - MetricsLambdaExecutionRole
      - MetricsTimestreamDatabase
      - MetricsRawTable
      - MetricsMinTable
      - MetricsHrTable
      - MetricsDayTable

  MetricsApiGatewayInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MetricsPostRecordLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - MetricsPostRecordLambdaFunction

  MetricsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MetricsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetricsLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${LambdaBucketName}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                Resource:
                  - !GetAtt MetricsRawKinesisStream.Arn
                  - !GetAtt MetricsProcessedKinesisStream.Arn
              - Effect: Allow
                Action:
                  - timestream:WriteRecords
                Resource:
                  - !GetAtt MetricsRawTable.Arn
                  - !GetAtt MetricsMinTable.Arn
                  - !GetAtt MetricsHrTable.Arn
                  - !GetAtt MetricsDayTable.Arn
    DependsOn:
      - MetricsRawKinesisStream
      - MetricsProcessedKinesisStream
      - MetricsRawTable
      - MetricsMinTable
      - MetricsHrTable
      - MetricsDayTable

  ## TimeStream Database
  MetricsTimeStreamBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref TimeStreamBucketName

  MetricsTimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: !Ref TimestreamDatabaseName

  MetricsRawTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabaseName
      TableName: metrics_raw
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: !Ref TimestreamTableMemoryStoreRetentionPeriodInHours
        MagneticStoreRetentionPeriodInDays: !Ref TimestreamTableStoreRetentionPeriodInDays
      Tags:
        - Key: Environment
          Value: Production
    DependsOn:
      - MetricsTimestreamDatabase

  MetricsMinTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabaseName
      TableName: metrics_min
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: !Ref TimestreamTableMemoryStoreRetentionPeriodInHours
        MagneticStoreRetentionPeriodInDays: !Ref TimestreamTableStoreRetentionPeriodInDays
      Tags:
        - Key: Environment
          Value: Production
    DependsOn:
      - MetricsTimestreamDatabase

  MetricsHrTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabaseName
      TableName: metrics_hr
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: !Ref TimestreamTableMemoryStoreRetentionPeriodInHours
        MagneticStoreRetentionPeriodInDays: !Ref TimestreamTableStoreRetentionPeriodInDays
      Tags:
        - Key: Environment
          Value: Production
    DependsOn:
      - MetricsTimestreamDatabase

  MetricsScheduledQuerySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: MetricsScheduledQueryTopic
      TopicName: MetricsScheduledQueryTopic

  MetricsAvgPerHourScheduledQuery:
    Type: 'AWS::Timestream::ScheduledQuery'
    Condition: ShouldCreateResource
    Properties:
      QueryString: !Sub |
        SELECT
          BIN(time, 1h) AS "time",
          "name",
          AVG(value) AS "value"
        FROM
          ${TimestreamDatabaseName}.metrics_min
        GROUP BY
          "name", BIN(time, 1h)
      ScheduleConfiguration:
        ScheduleExpression: rate(60 minutes)
      ScheduledQueryExecutionRoleArn: !GetAtt MetricsScheduledTimeStreamQueryExecutionRole.Arn
      NotificationConfiguration:
        SnsConfiguration:
          TopicArn: !Ref MetricsScheduledQuerySNSTopic
      ErrorReportConfiguration:
        S3Configuration:
          BucketName: !Ref TimeStreamBucketName
      TargetConfiguration:
        TimestreamConfiguration:
          DatabaseName: !Ref TimestreamDatabaseName
          TableName: metrics_day
          TimeColumn: time
          MultiMeasureMappings:
            MultiMeasureAttributeMappings:
              - MeasureValueType: DOUBLE
                SourceColumn: value
            TargetMultiMeasureName: value
          DimensionMappings:
            - Name: name
              DimensionValueType: VARCHAR
    DependsOn:
      - MetricsTimestreamDatabase
      - MetricsScheduledTimeStreamQueryExecutionRole
      - MetricsTimeStreamBucket
      - MetricsHrTable
      - MetricsMinTable
      - MetricsScheduledQuerySNSTopic

  MetricsScheduledTimeStreamQueryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MetricsScheduledTimeStreamQueryExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: timestream.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetricsScheduledTimeStreamQueryExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:Query
                  - timestream:Select
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${TimeStreamBucketName}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*

  MetricsDayTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabaseName
      TableName: metrics_day
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: !Ref TimestreamTableMemoryStoreRetentionPeriodInHours
        MagneticStoreRetentionPeriodInDays: !Ref TimestreamTableStoreRetentionPeriodInDays
      Tags:
        - Key: Environment
          Value: Production
    DependsOn:
      - MetricsTimestreamDatabase

  MetricsAvgPerDayScheduledQuery:
    Type: 'AWS::Timestream::ScheduledQuery'
    Condition: ShouldCreateResource
    Properties:
      QueryString: !Sub |
        SELECT
          BIN(time, 1d) AS "time",
          "name",
          AVG(value) AS "value"
        FROM
          ${TimestreamDatabaseName}.metrics_hr
        GROUP BY
          "name", BIN(time, 1d)
      ScheduleConfiguration:
        ScheduleExpression: rate(24 hours)
      ScheduledQueryExecutionRoleArn: !GetAtt MetricsScheduledTimeStreamQueryExecutionRole.Arn
      NotificationConfiguration:
        SnsConfiguration:
          TopicArn: !Ref MetricsScheduledQuerySNSTopic
      ErrorReportConfiguration:
        S3Configuration:
          BucketName: !Ref TimeStreamBucketName
      TargetConfiguration:
        TimestreamConfiguration:
          DatabaseName: !Ref TimestreamDatabaseName
          TableName: metrics_day
          TimeColumn: time
          MultiMeasureMappings:
            MultiMeasureAttributeMappings:
              - MeasureValueType: DOUBLE
                SourceColumn: value
            TargetMultiMeasureName: value
          DimensionMappings:
            - Name: name
              DimensionValueType: VARCHAR
    DependsOn:
      - MetricsTimestreamDatabase
      - MetricsScheduledTimeStreamQueryExecutionRole
      - MetricsTimeStreamBucket
      - MetricsHrTable
      - MetricsDayTable
      - MetricsScheduledQuerySNSTopic

  ## Kinesis Stream
  MetricsRawKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: RawMetricsKinesisStream
      ShardCount: 1

  MetricsProcessedKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: ProcessedMetricsKinesisStream
      ShardCount: 1

  MetricsRawKinesisEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MetricsRawKinesisStream.Arn
      FunctionName: !GetAtt MetricsConsumeStreamLambdaFunction.Arn
      BatchSize: 10
      StartingPosition: LATEST
    DependsOn:
      - MetricsRawKinesisStream
      - MetricsConsumeStreamLambdaFunction

  MetricsProcessedKinesisEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MetricsProcessedKinesisStream.Arn
      FunctionName: !GetAtt MetricsConsumeStreamLambdaFunction.Arn
      BatchSize: 10
      StartingPosition: LATEST
    DependsOn:
      - MetricsProcessedKinesisStream
      - MetricsConsumeStreamLambdaFunction

  MetricsKinesisAnalyticsApplication:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      ApplicationName: MetricsKinesisAnalyticsApp
      RuntimeEnvironment: SQL-1_0
      ServiceExecutionRole: !GetAtt MetricsKinesisAnalyticsRole.Arn
      ApplicationConfiguration:
        ApplicationCodeConfiguration:
          CodeContentType: PLAINTEXT
          CodeContent:
            TextContent: |
              -- Create a stream to ingest data
              CREATE OR REPLACE STREAM "SOURCE_SQL_STREAM_001" (
                "name" VARCHAR,
                "value" DOUBLE,
                "time" TIMESTAMP
              );

              -- Create an output stream to store the result
              CREATE OR REPLACE STREAM "RESULT_SQL_STREAM" (
                "name" VARCHAR,
                "value" DOUBLE,
                "time" TIMESTAMP
              );

              -- Query to calculate average per minute for value grouped by name
              -- and insert the result into the output stream
              INSERT INTO "RESULT_SQL_STREAM"
              SELECT
                "name",
                AVG("value") AS "value",
                TUMBLE_START("time", INTERVAL '1' MINUTE) AS "time"
              FROM
                "SOURCE_SQL_STREAM_001"
              GROUP BY
                "name", TUMBLE("time", INTERVAL '1' MINUTE);

              -- Insert the results into the Kinesis stream
              CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "${MetricsProcessedKinesisStream.Arn}"
                SELECT STREAM * FROM "SOURCE_SQL_STREAM_001";
    DependsOn:
      - MetricsProcessedKinesisStream
      - MetricsRawKinesisStream
      - MetricsKinesisAnalyticsRole

  MetricsKinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MetricsKinesisAnalyticsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetricsKinesisAnalyticsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                Resource: !GetAtt MetricsRawKinesisStream.Arn
    DependsOn:
      - MetricsRawKinesisStream

  MetricsKinesisFirehoseRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: MetricsKinesisFirehoseRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecord
              - kinesis:PutRecords
            Resource: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${MetricsProcessedKinesisStream.Arn}
      Roles:
        - Ref: MetricsKinesisAnalyticsRole
    DependsOn:
      - MetricsProcessedKinesisStream

  ## Visualization
  MetricsQuickSightAnalysis:
    Type: 'AWS::QuickSight::Analysis'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      AnalysisId: MetricsTimestreamAnalysis
      Name: MetricsTimestreamAnalysis
      Definition:
        DataSetIdentifierDeclarations:
          - DataSetArn: !GetAtt MetricsRawTimestreamDataSet.Arn
            Identifier: MetricsRawTimestreamDataSetId
          - DataSetArn: !GetAtt MetricsAvgMinTimestreamDataSet.Arn
            Identifier: MetricsAvgMinTimestreamDataSetId
          - DataSetArn: !GetAtt MetricsAvgHrTimestreamDataSet.Arn
            Identifier: MetricsAvgMinTimestreamDataSetId
          - DataSetArn: !GetAtt MetricsAvgDayTimestreamDataSet.Arn
            Identifier: MetricsAvgMinTimestreamDataSetId
      Permissions:
        - Principal: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${Username}'
          Actions:
            - "quicksight:DescribeAnalysis"
            - "quicksight:DescribeDataSet"
            - "quicksight:DescribeDataSetPermissions"
            - "quicksight:PassDataSet"
            - "quicksight:DescribeIngestion"
            - "quicksight:ListIngestions"
            - "quicksight:CreateIngestion"
            - "quicksight:CancelIngestion"
            - "quicksight:UpdateAnalysis"
            - "quicksight:QueryAnalysis"
    DependsOn:
      - MetricsRawTimestreamDataSet
      - MetricsAvgMinTimestreamDataSet
      - MetricsAvgHrTimestreamDataSet
      - MetricsAvgDayTimestreamDataSet

  MetricsQuickSightTemplate:
    Type: 'AWS::QuickSight::Template'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      Name: MetricsQuickSightTemplate
      Permissions:
        - Principal: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${Username}'
          Actions:
            - 'quicksight:DescribeTemplate'
            - 'quicksight:DescribeTemplateAlias'
            - 'quicksight:DeleteTemplateAlias'
            - 'quicksight:UpdateTemplatePermissions'
            - 'quicksight:QueryTemplate'
            - 'quicksight:UpdateTemplate'
            - 'quicksight:CreateTemplateAlias'
      SourceEntity:
        SourceAnalysis:
          Arn: !GetAtt MetricsQuickSightAnalysis.Arn
    DependsOn:
      - MetricsQuickSightAnalysis

  MetricsQuickSightDashboard:
    Type: 'AWS::QuickSight::Dashboard'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DashboardId: MetricsQuickSightDashboard
      Name: MetricsQuickSightDashboard
      Permissions:
        - Principal: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${Username}'
          Actions:
            - 'quicksight:DescribeDashboard'
            - 'quicksight:ListDashboardVersions'
            - 'quicksight:UpdateDashboardPermissions'
            - 'quicksight:QueryDashboard'
            - 'quicksight:RestoreAnalysis'
            - 'quicksight:UpdateDashboard'
      SourceEntity:
        SourceTemplate:
          Arn: !GetAtt MetricsQuickSightTemplate.Arn
    DependsOn:
      - MetricsQuickSightTemplate

  MetricsRawTimestreamDataSet:
    Type: 'AWS::QuickSight::DataSet'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: MetricsRawTimestreamDataSet
      Name: MetricsRawTimestreamDataSet
      PhysicalTableMap:
        MetricsRawTimestreamTable:
          CustomSql:
            DataSourceArn: !GetAtt MetricsTimestreamDataSource.Arn
            Name: MetricsTimestreamDatabase.metrics_raw
            Columns:
              - Name: name
                Type: STRING
              - Name: value
                Type: DECIMAL
              - Name: time
                Type: DATETIME
            SqlQuery: !Sub |
              SELECT
                BIN(time, 1s) AS "time",
                "name",
                AVG(value) AS "value"
              FROM
                ${TimestreamDatabaseName}.metrics_raw
              GROUP BY
                "name", BIN(time, 1s)
      LogicalTableMap:
        MetricsRawTimestreamTable:
          Alias: metrics_raw
          Source:
            PhysicalTableId: MetricsRawTimestreamTable
      ImportMode: DIRECT_QUERY
    DependsOn:
      - MetricsTimestreamDataSource
      - MetricsTimestreamDatabase
      - MetricsRawTable

  MetricsAvgMinTimestreamDataSet:
    Type: 'AWS::QuickSight::DataSet'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: MetricsAvgMinTimestreamDataSet
      Name: MetricsAvgMinTimestreamDataSet
      PhysicalTableMap:
        MetricsAvgMinTimestreamTable:
          CustomSql:
            DataSourceArn: !GetAtt MetricsTimestreamDataSource.Arn
            Name: MetricsTimestreamDatabase.metrics_min
            Columns:
              - Name: name
                Type: STRING
              - Name: value
                Type: DECIMAL
              - Name: time
                Type: DATETIME
            SqlQuery: !Sub |
              SELECT
                BIN(time, 1m) AS "time",
                "name",
                AVG(value) AS "value"
              FROM
                ${TimestreamDatabaseName}.metrics_min
              GROUP BY
                "name", BIN(time, 1m)
      LogicalTableMap:
        MetricsAvgMinTimestreamTable:
          Alias: metrics_min
          Source:
            PhysicalTableId: MetricsAvgMinTimestreamTable
      ImportMode: DIRECT_QUERY
    DependsOn:
      - MetricsTimestreamDataSource
      - MetricsTimestreamDatabase
      - MetricsMinTable

  MetricsAvgHrTimestreamDataSet:
    Type: 'AWS::QuickSight::DataSet'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: MetricsAvgHrTimestreamDataSet
      Name: MetricsAvgHrTimestreamDataSet
      PhysicalTableMap:
        MetricsAvgHrTimestreamTable:
          CustomSql:
            DataSourceArn: !GetAtt MetricsTimestreamDataSource.Arn
            Name: MetricsTimestreamDatabase.metrics_hr
            Columns:
              - Name: name
                Type: STRING
              - Name: value
                Type: DECIMAL
              - Name: time
                Type: DATETIME
            SqlQuery: !Sub |
              SELECT
                BIN(time, 1h) AS "time",
                "name",
                AVG(value) AS "value"
              FROM
                ${TimestreamDatabaseName}.metrics_hr
              GROUP BY
                "name", BIN(time, 1h)
      LogicalTableMap:
        MetricsAvgHrTimestreamTable:
          Alias: metrics_hr
          Source:
            PhysicalTableId: MetricsAvgHrTimestreamTable
      ImportMode: DIRECT_QUERY
    DependsOn:
      - MetricsTimestreamDataSource
      - MetricsTimestreamDatabase
      - MetricsHrTable

  MetricsAvgDayTimestreamDataSet:
    Type: 'AWS::QuickSight::DataSet'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: MetricsAvgDayTimestreamDataSet
      Name: MetricsAvgDayTimestreamDataSet
      PhysicalTableMap:
        MetricsAvgDayTimestreamTable:
          CustomSql:
            DataSourceArn: !GetAtt MetricsTimestreamDataSource.Arn
            Name: MetricsTimestreamDatabase.metrics_day
            Columns:
              - Name: name
                Type: STRING
              - Name: value
                Type: DECIMAL
              - Name: time
                Type: DATETIME
            SqlQuery: !Sub |
              SELECT
                BIN(time, 1d) AS "time",
                "name",
                AVG(value) AS "value"
              FROM
                ${TimestreamDatabaseName}.metrics_day
              GROUP BY
                "name", BIN(time, 1d)
      LogicalTableMap:
        MetricsAvgDayTimestreamTable:
          Alias: metrics_day
          Source:
            PhysicalTableId: MetricsAvgDayTimestreamTable
      ImportMode: DIRECT_QUERY
    DependsOn:
      - MetricsTimestreamDataSource
      - MetricsTimestreamDatabase
      - MetricsDayTable

  MetricsTimestreamDataSource:
    Type: 'AWS::QuickSight::DataSource'
    Condition: ShouldCreateResource
    Properties:
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSourceId: MetricsTimestreamDataSource
      Name: MetricsTimestreamDataSource
      Type: 'TIMESTREAM'
    DependsOn:
      - MetricsTimestreamDatabase